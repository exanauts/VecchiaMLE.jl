"""
    diagnostics, result = VecchiaMLE_Run(iVecchiaMLE::VecchiaMLEInput)

    Main function to run the analysis. Make sure that your VecchiaMLEInput struct is 
    filled out correctly!

## Input arguments
* `iVecchiaMLE`: The filled out VecchiaMLEInput struct. See VecchiaMLEInput struct for more details.

## Output arguments
* `diagnostics`: Some diagnostics of the analysis that would be difficult otherwise to get. See Diagnostics struct for more details.
* `preschol`: The approximate precision's cholesky, generated by the samples. 
"""
function VecchiaMLE_Run(model::VecchiaModel, optimizer, args...; kwargs...)

    output = optimizer(model, args...; kwargs...)

    S = Vector{Int}
    preschol = SparseMatrixCSC(iVecchiaMLE.n, iVecchiaMLE.n, 
        S(iVecchiaMLE.colptrL), S(iVecchiaMLE.rowsL),
        Vector{Float64}(view(output.solution, 1:model.cache.nnzL))
    )
    return preschol
end

function create_vecchia_model(
    k::Int,
    samples::M;
    ptset::V=generate_safe_xyGrid(n),
    lvar_diag::Vl=zeros(n),
    uvar_diag::Vu=zeros(n),
    rowsL::V1=nothing,
    colptrL::V1=nothing,
    metric::Distances.Metric=Distances.Euclidean(),
    sparsitygen::Symbol=:NN,
    lambda::Real=0.0,
    x0::Vx0=nothing,
    validate::Bool=false,
    arch::Symbol=:cpu
) where
    {
        M   <: AbstractMatrix,
        V   <: Union{AbstractVector, AbstractMatrix},
        V1  <: Union{AbstractVector, Nothing},
        Vl  <: AbstractVector,
        Vu  <: AbstractVector,
        Vx0 <: Union{AbstractVector, Nothing}
    }

    ptset_ = resolve_ptset(n, ptset)

    # validate input
    validate && validate_input()

    # get model, cache, meta
    rowsL_, colptrL_ = sparsitypattern(resolve_sparistygen(Val(sparsitygen), rowsL), k, metric, rowsL, colptrL)
    cache = vecchia_model_cache(samples, lambda, rowsL_, colptrL_, lvar_diag, uvar_diag, Val(arch))
    meta = vecchia_model_meta(samples, cache, x0)
    
    return VecchiaModel(meta, Couters(), cache)
    

end